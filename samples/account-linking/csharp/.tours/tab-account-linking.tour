{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Tab-Account-Linking",
  "steps": [
    {
      "title": "Introduction",
      "description": "# Introduction\r\nThis is a tour of the Tab's usage of the account linking for calling the [Github Repos API](https://docs.github.com/en/rest/reference/repos#list-repositories-for-a-user).\r\n\r\nAt a high level this uses the backend service as a proxy for the /repositories API."
    },
    {
      "file": "./samples/account-linking/csharp/Source/wwwroot/index.html",
      "description": "## The Tab Page\r\nThis is an extremely minimal tab implementation. In practice you will likely build a more complex single-page application but to keep this focused on the core functionality this is built using pure js & the [Microsoft Teams client sdk](https://docs.microsoft.com/en-us/javascript/api/overview/msteams-client?view=msteams-client-js-latest).\r\n\r\nThis app just dumps the JSON payload of the Repositories API into the body of the tab\r\n\r\n![Screenshot of json payload of GitHub repositories displayed in a Teams Personal tab](./samples/account-linking/csharp/Docs/Images/TabScreenshot.jpg)",
      "line": 11,
      "selection": {
        "start": {
          "line": 6,
          "character": 4
        },
        "end": {
          "line": 11,
          "character": 12
        }
      }
    },
    {
      "file": "./samples/account-linking/csharp/Source/wwwroot/scripts.js",
      "description": "# JavaScript entrypoint\r\nThe entry point of the tab registers handlers for the login / logout buttons and initially calls the 'onLogin' method to automatically kick off the login / repository fetching when the user visits the page. ",
      "line": 99
    },
    {
      "file": "./samples/account-linking/csharp/Source/wwwroot/scripts.js",
      "description": "## On Log In\r\nThis is the primary functionality of the frontend. We will trace this call first as if the user _isn't_ logged in.",
      "line": 92,
      "selection": {
        "start": {
          "line": 79,
          "character": 25
        },
        "end": {
          "line": 79,
          "character": 32
        }
      }
    },
    {
      "file": "./samples/account-linking/csharp/Source/wwwroot/scripts.js",
      "description": "This is a wrapper for the `microsoftTeams.authentication.getAuthToken` call, this will return an Azure AD access token for the configured backend API. (Assuming the manifest & AzureAd application registrations are configured correctly)",
      "line": 57,
      "selection": {
        "start": {
          "line": 31,
          "character": 3
        },
        "end": {
          "line": 31,
          "character": 46
        }
      }
    },
    {
      "file": "./samples/account-linking/csharp/Source/wwwroot/scripts.js",
      "description": "We then call the `/github/repositories` API on our web API with the `Bearer` token attached as the authorization header per the [OAuth2.0 specification](https://datatracker.ietf.org/doc/html/rfc6750#section-2.1). ",
      "line": 64,
      "selection": {
        "start": {
          "line": 59,
          "character": 3
        },
        "end": {
          "line": 64,
          "character": 6
        }
      }
    },
    {
      "file": "./samples/account-linking/csharp/Source/Controllers/GitHubController.cs",
      "description": "# Getting a verifiable identity\r\nThe call then lands on the backend where we use the [Microsoft.Identity.Web](https://docs.microsoft.com/en-us/azure/active-directory/develop/microsoft-identity-web) library to validate the bearer token & parse out claims. We use the claims in the token as they are signed by AzureAD and are therefore more trustworthy than a url parameter or similar unauthenticated parameter.\r\n\r\nWe then grab the user and tenant ids from the token which we will use as the key in our database of GitHub access and refresh tokens.\r\n",
      "line": 36,
      "selection": {
        "start": {
          "line": 35,
          "character": 1
        },
        "end": {
          "line": 36,
          "character": 69
        }
      }
    },
    {
      "file": "./samples/account-linking/csharp/Source/Controllers/GitHubController.cs",
      "description": "## Attempt 1 at getting the User's GitHub access token\r\nWe then use the `OAuthTokenProvider` service to attempt to get the access token for the current user. This will return a `NeedsConsentResult` as the database isn't populated with the current user's GitHub access & refresh tokens. ",
      "line": 46,
      "selection": {
        "start": {
          "line": 46,
          "character": 9
        },
        "end": {
          "line": 46,
          "character": 104
        }
      }
    },
    {
      "file": "./samples/account-linking/csharp/Source/Controllers/GitHubController.cs",
      "description": "## Redirecting the Tab to the auth flow\r\nWhen the `OAuthTokenProvider` doesn't have a token for the user, it generates a cryptographically tamper evident `state` object and crafts the redirection URI to this app's auth start.\r\n\r\nWe will go into detail of how the `state` is generated and used in the [token storage tour][Token Storage].",
      "line": 56,
      "selection": {
        "start": {
          "line": 48,
          "character": 8
        },
        "end": {
          "line": 56,
          "character": 15
        }
      }
    },
    {
      "file": "./samples/account-linking/csharp/Source/Controllers/GitHubController.cs",
      "description": "We return back an easily identified status code, in this case `HTTP 412/PreconditionFailed` so that the tab can know to raise the authorization prompt.\r\n\r\nWe attach the `state` object so we can correlate the user's login/consent for in GitHub with the user who attempted this request.  ",
      "line": 55,
      "selection": {
        "start": {
          "line": 55,
          "character": 17
        },
        "end": {
          "line": 55,
          "character": 68
        }
      }
    },
    {
      "file": "./samples/account-linking/csharp/Source/wwwroot/scripts.js",
      "description": "## Detecting the authentication requirement\r\nBack in the tab code, we detect the `HTTP 412/PreconditionFailed` status code and now need to open the [authentication popup](https://docs.microsoft.com/en-us/microsoftteams/platform/tabs/how-to/authentication/auth-flow-tab) with the start of our GitHub auth flow. ",
      "line": 70,
      "selection": {
        "start": {
          "line": 66,
          "character": 3
        },
        "end": {
          "line": 70,
          "character": 51
        }
      }
    },
    {
      "file": "./samples/account-linking/csharp/Source/wwwroot/scripts.js",
      "description": "## Opening the authentication popup\r\nWe call the `microsoftTeams.authentication.authenticate` API with the `/oauth/start` path on _our_ backend (not Github's) to minimize the total number of trusted domains for our app. \r\n\r\nThis `openAuthPopup` call wraps the authentication in a promise that will resolve once the user completes the auth flow.\r\n\r\nWe use the `isExternal` flag and attach the `oauthRedirectMethod` and `authId` query parameters to deal with login pages that don't allow Teams user agents like the native desktop or mobile clients.",
      "line": 19,
      "selection": {
        "start": {
          "line": 12,
          "character": 3
        },
        "end": {
          "line": 19,
          "character": 7
        }
      }
    },
    {
      "file": "./samples/account-linking/csharp/Source/Controllers/OAuthController.cs",
      "description": "## Redirecting to the GitHub Authorization page\r\nThe request to `/oauth/start` lands here and we now just redirect the user-agent to the configured `AuthorizeUrl` which in this instance would be `https://github.com/login/oauth/authorize`\r\n\r\nNote, we also configure the `redirect_uri` so that it will hit the `/oauth/end` action later in this file. \r\n\r\nThis will redirect the auth popup to the GitHub login page if the user isn't currently logged in, or the authorization page if they need to consent to this application accessing their repositories.\r\n![Image of the GitHub login page inside of a popup over the Microsoft Teams tab](./samples/account-linking/csharp/Docs/Images/TabAuthPopup.jpg)",
      "line": 46
    },
    {
      "file": "./samples/account-linking/csharp/Source/Controllers/OAuthController.cs",
      "description": "## Handling the GitHub redirect\r\nAfter the user completes the authorization, we now complete the [Authorization code grant flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.1) by exchanging the `code` we received from GitHub for the access and refresh tokens. The `tokenProvider` encapsulates this behavior which we explore in the [token storage tour][Token Storage]",
      "line": 66
    },
    {
      "file": "./samples/account-linking/csharp/Source/Controllers/OAuthController.cs",
      "description": "We then return to the popup the `authEnd` page in the `wwwroot` folder so that we can notify Teams that the login flow is complete and close the popup. ",
      "line": 69
    },
    {
      "file": "./samples/account-linking/csharp/Source/wwwroot/authEnd.html",
      "description": "The `authEnd` page is a very minimal stub to load the `authEnd.js` file.",
      "line": 8
    },
    {
      "file": "./samples/account-linking/csharp/Source/wwwroot/authEnd.js",
      "description": "We then use the `notifySuccess` call to indicate to Microsoft Teams that the authentication is complete. This will notify the tab that the auth is complete & close the popup window.",
      "line": 14
    },
    {
      "file": "./samples/account-linking/csharp/Source/wwwroot/scripts.js",
      "description": "The `microsoftTeams.authentication.notifySuccess()` from the popup will resolve this promise and allow us to continue on. At this stage we have now logged in the user & can successfully call the `/github/repositories` API. \r\n\r\nNote: we assume there isn't a race condition with the user logging out immediately in-between requests. You may wish to add resiliancy to this by putting this into a retry-loop rather than a single one-off attempt. ",
      "line": 82,
      "selection": {
        "start": {
          "line": 70,
          "character": 5
        },
        "end": {
          "line": 82,
          "character": 8
        }
      }
    },
    {
      "file": "./samples/account-linking/csharp/Source/wwwroot/scripts.js",
      "description": "At the end of the call chain, we update the button states so the user can perform the `logout` action.",
      "line": 87,
      "selection": {
        "start": {
          "line": 80,
          "character": 9
        },
        "end": {
          "line": 81,
          "character": 31
        }
      }
    }
  ],
  "ref": "nibeauli/account-linking-sample"
}