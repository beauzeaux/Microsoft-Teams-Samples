{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Conversational Account Linking",
  "steps": [
    {
      "file": "Source/Bots/SampleActivityHandler.cs",
      "description": "The most complex account linking scenario is for the conversational bot. In this tour we will walk through how to use Dialogs to link the account as part of a stateful turn-based conversation. \r\n\r\nThe crucial component in this flow is the `AccountLinkingPrompt`. This is very similar to the `OAuthPrompt` provided by the BotFramework, only instead of using the [Bot Framework Token Service](https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-concept-authentication?view=azure-bot-service-4.0) it uses our internal token database. \r\n\r\nThe difference between the two is that the Bot Framework Token Service cannot be used outside of the context of a bot, so requests from our Tab wouldn't be able to leverage it. This would cause the tab to need authorization as well as the bot meaning the user would need to sign in twice for the same application which is a poor user experience.",
      "line": 55
    },
    {
      "file": "Source/Bots/SampleActivityHandler.cs",
      "description": "For this sample we will delegate all message handling to the dialog, which in this sample is the `MainDialog`.",
      "line": 62,
      "selection": {
        "start": {
          "line": 57,
          "character": 1
        },
        "end": {
          "line": 62,
          "character": 108
        }
      }
    },
    {
      "file": "Source/Dialogs/MainDialog.cs",
      "description": "The `MainDialog` is a 2 step dialog where the bot will in response to any message (other than `logout`):\r\n1. Ask for the user consent (if required)\r\n2. Send back the json of the user's repositories\r\n\r\n![Image of json in a Teams Message from the bot](./Docs/Images/BotResponse.jpg)",
      "line": 38,
      "selection": {
        "start": {
          "line": 28,
          "character": 1
        },
        "end": {
          "line": 38,
          "character": 51
        }
      }
    },
    {
      "file": "Source/Dialogs/AccountLinkingPrompt.cs",
      "description": "The `AccountLinkingPrompt` handles attempting to fetch the user's access token. As in the other flows, lets first assume we don't have an access token for the current user. ",
      "line": 52
    },
    {
      "file": "Source/Dialogs/AccountLinkingPrompt.cs",
      "description": "When the user isn't logged in, we send back a `SigninCard` response with the redirect uri that points to our `/oauth/start` endpoint on the `OAuthController`. \r\n\r\nThe user will see a sign in card in the conversation with the bot. \r\n\r\n![Image of a SignIn card in the bot](./Docs/Images/ConversationalPrompt.jpg)",
      "line": 72,
      "selection": {
        "start": {
          "line": 55,
          "character": 1
        },
        "end": {
          "line": 73,
          "character": 1
        }
      }
    },
    {
      "file": "Source/Dialogs/AccountLinkingPrompt.cs",
      "description": "We then store the Id of this activity so we can later update the prompt to hide the sign in button to avoid the user inadvertantly attempting to replay their own sign in.",
      "line": 73,
      "selection": {
        "start": {
          "line": 73,
          "character": 13
        },
        "end": {
          "line": 73,
          "character": 50
        }
      }
    },
    {
      "file": "Source/Dialogs/AccountLinkingPrompt.cs",
      "description": "Please note that there is an `expiration` saved as part of the [Dialog State](https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-concept-state?view=azure-bot-service-4.0). We use this in the next step to ensure the user's login was performed within the expected timeframe. ",
      "line": 47
    },
    {
      "file": "Source/Bots/SampleActivityHandler.cs",
      "description": "When the user completes the signin, the `notifySuccess` triggers an invoke activity which we use to continue the dialog with the user. ",
      "line": 131
    },
    {
      "file": "Source/Dialogs/AccountLinkingPrompt.cs",
      "description": "Continuing the dialog, we now check that the activity hasn't timed out (& should be ignored). ",
      "line": 106,
      "selection": {
        "start": {
          "line": 98,
          "character": 9
        },
        "end": {
          "line": 106,
          "character": 10
        }
      }
    },
    {
      "file": "Source/Dialogs/AccountLinkingPrompt.cs",
      "description": "Then, we again attempt to retrieve the user's access token. Since the user has logged in, this will now succeed. ",
      "line": 111,
      "selection": {
        "start": {
          "line": 108,
          "character": 9
        },
        "end": {
          "line": 111,
          "character": 109
        }
      }
    },
    {
      "file": "Source/Dialogs/AccountLinkingPrompt.cs",
      "description": "We then update the login card with a card that lets the user they're now logged in. \r\n\r\n![Image of card letting the user know they are \"now logged in\"](./Docs/Images/ConversationalSuccessCard.jpg)",
      "line": 129,
      "selection": {
        "start": {
          "line": 119,
          "character": 13
        },
        "end": {
          "line": 129,
          "character": 102
        }
      }
    },
    {
      "file": "Source/Dialogs/MainDialog.cs",
      "description": "From there, we then continue the Dialog flow by getting the list of the user's repositories and sending them to the user. ",
      "line": 54
    }
  ],
  "ref": "nibeauli/account-linking-sample"
}